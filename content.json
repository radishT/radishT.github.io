{"pages":[{"title":"分类","permalink":"http://yoursite.com/categories/index.html","text":""}],"posts":[{"title":"Java应用线上问题排查(1)","permalink":"http://yoursite.com/2019/04/25/jvmnote1/","text":"Java应用上线时常会遇到一些事故为了避免和读者的实际情况产生偏离,我先介绍我的整个生产环境: JDK:Java1.8 MySQL : 5.6 Linux CentOS 6.5 过程中参考过的一些他人的文章一次 Java 内存泄漏的排查 一.场景1 发生线上问题后,该怎么做保留现场这里的保留现场是一个宽泛的概念,我一般是根据问题来做这一步,以下是我的一些思路: 1.先看日志报错,比如是out of memory 就基本可以定位问题在JVM而不是操作系统的问题,所以只需要保存一些必要的JVM现场即可. 2.但是如果是一些TCP连接耗尽(TIME_WAITING例如SYN,ddos攻击)、TCP链接没有及时释放(表现在服务不可用)、网络丢包波动之类的网络异常、kafka消息不完整等问题,就需要保留操作系统或者kafka组件的日志信息了,后续介绍这方面的方法 保留JVM的堆栈信息的方法保留栈信息: jstack pid &gt; stack.log 保留堆信息: jmap -dump:format=b,file=heap.log pid 查询PID的方式很多,如果确定服务所在的端口可以用: netstat -anp | grep portno 一般来说都会用 top 去定位运行异常(比如CPU占用过高,内存占用过高)的PID 确认问题常见问题1:服务器内存爆炸-CPU爆炸top指令发现我们的Java应用的CPU占用或者内存占用明显高出平时的情况! 常见问题2:GC频繁运行有时候我们并不能在刚才的保留现场阶段就确认到问题,比如简单的top或者程序日志无法帮助我们确认问题在哪里,我们可以进一步分析我们保留的堆栈信息,这里例举几个通过日志可以看到的问题: 获取GC运行概况jstat -gcutil pid 1000 #这里的pid是进程号,1000代表1秒采样一次 解析输出的内容(举例1 堆内存爆炸导致FullGC频繁STW 参考博客):—-对各参数有疑问的朋友可以跳转:jstat命令的使用问题有两点: Eden Old 即图中的E和O 占比过高! 1秒采样一次的频率,FGC的次数却在飙升,说明FGC在频繁进行! 解决问题常见问题1:服务器内存爆炸-CPU爆炸-解决方案思路:看JVM中有哪些线程,它们都在干嘛!定位占用大量资源的线程步骤1.确定应用PID 这里不赘述了步骤2.查看这个PID下的所有线程!感兴趣的看下这篇博文-&gt; 一个CPU占用过高的案例 top -Hp pid # shift+p 按cpu排序，shift+m 按内存排序 步骤3.如果是想排查内存问题就按内存排序,如果排查CPU占用异常就按CPU排序,最后定位到1个高占用的PID 这里的PID是线程ID,对应jstack打印出的线程的nid 但是linux打印的是十进制,jstack的nid是16进制的. 这里假设定位到的进程ID:2152,线程ID是23256,转为十六进制是5ad8 步骤4.马上看看这个线程在干嘛,注意这时候要快,因为可能这个线程会在打指令的过程中就结束掉了! jstack 2152| grep 5ad8 -A 30 #5ad8 是线程号,2152是进程号 -A 30 是展示jstack栈匹配到5ad8这行开始往下展示30行文本 具体展示多少行看打印出来的栈信息调整,少了就加 常见问题2:GC频繁运行-解决方案引起fullGC的原因有很多,这里给大家介绍几个例子: 某集合中的对象不断累积却没有删除机制—容易出现在一些全局的集合对象中 在没有评估数据量的情况下加载数据库大表的全表数据到集合 + 高并发场景 —例如日志模块,报表模块等 JVM启动参数分配的内存和项目实际运行环境不符,导致堆内存过小从而导致FullGC频繁进行"}]}