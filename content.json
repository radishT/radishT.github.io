{"pages":[{"title":"分类","permalink":"http://yoursite.com/categories/index.html","text":""}],"posts":[{"title":"Java应用线上问题排查(1)","permalink":"http://yoursite.com/2019/04/25/jvmnote1/","text":"Java应用上线时常会遇到一些事故为了避免和读者的实际情况产生偏离,我先介绍我的整个生产环境: JDK:Java1.8 MySQL : 5.6 Linux CentOS 6.5 过程中参考过的一些他人的文章一次 Java 内存泄漏的排查 一.场景1 发生线上问题后,该怎么做保留现场这里的保留现场是一个宽泛的概念,我一般是根据问题来做这一步,以下是我的一些思路: 1.先看日志报错,比如是out of memory 就基本可以定位问题在JVM而不是操作系统的问题,所以只需要保存一些必要的JVM现场即可.2.但是如果是一些TCP连接耗尽(TIME_WAITING例如SYN,ddos攻击)、TCP链接没有及时释放(表现在服务不可用)、网络丢包波动之类的网络异常、kafka消息不完整等问题,就需要保留操作系统或者kafka组件的日志信息了,后续介绍这方面的方法 保留JVM的堆栈信息的方法保留栈信息:12345jstack pid &gt; stack.log``` 保留堆信息: ```shelljmap -dump:format=b,file=heap.log pid 查询PID的方式很多,如果确定服务所在的端口可以用:1netstat -anp | grep portno 一般来说都会用 top 去定位运行异常(比如CPU占用过高,内存占用过高)的PID 确认问题有时候我们并不能在刚才的保留现场阶段就确认到问题,比如简单的top或者程序日志无法帮助我们确认问题在哪里,我们可以进一步分析我们保留的堆栈信息,这里例举几个通过日志可以看到的问题:1.获取GC运行概况 jstat -gcutil pid 解析输出的内容(举例1 堆内存爆炸导致FullGC频繁STW 参考博客):"}]}